AUthor: Foo, JunXiang, Angel
Created: 24/05/2025
Modified: 25/05/2025
CLASS Main:
  Inherits: JFrame, implements ActionListener

  Class Fields:
    DECLARE sideBarPanel AS JPanel                  // Sidebar panel for navigation
    DECLARE contentPanel AS STATIC JPanel           // Main content area panel
    DECLARE homePageButton AS JButton               // Button to navigate Home page
    DECLARE userPageButton AS JButton               // Button to navigate Customer page
    DECLARE treatmentPageButton AS JButton          // Button to navigate Treatment page
    DECLARE paymentPageButton AS JButton            // Button to navigate Payment page
    DECLARE data AS STATIC Data                     // Shared data instance
    DECLARE latestTotalFee AS STATIC DOUBLE = 0.00  // Latest total fee for transaction
    DECLARE treatmentTransactionPanel AS TreatmentTransactionPanel  // Treatment panel
    DECLARE selectedTreatmentNames AS STATIC List OF String         // Selected treatment names for current session

  PROCEDURE: main
  PURPOSE: Entry point for the entire application
  IMPORT: args (ARRAY OF STRING)
  EXPORT: none
  ALGORITHM:
    SET data = NEW Data()
    CALL data.init()     // Load data from CSV files
    CREATE new Main object
    CALL mainGui()       // Launch the GUI interface

Author: Foo
Purpose: All the method for initialize and accessing/mutating all the info (pet, petOwner)
Created: 12/06/2025
Modified:12/06/2025
CLASS Data:
  Class Feild:
    DECLARE CSVPath as String = 'csv/'
    DECLARE PetsFileName as String = 'Pets.csv'
    DECLARE CustomersFileName as String = 'Customers.csv'
    DECLARE TreatmentFileName as String = 'Treatments.csv'
    DECLARE pets (ARRAY OF Pet OF SIZE 40)

    DECLARE petCount as INTEGER = 0

  PROCEDURE: ImportPets
  IMPORT: fileName
  EXPORT: none
  ALGORITHM: 
    DECLARE PetFilePath as String = CSVPath + PetsFileName
    petCount = 0

    OPEN PetFilePath FOR READING 
    WHILE EOF(PetsFilePath)
    DECLARE line as String
    WHILE NOT EOF(PetsFilePath)
      READ line

      IF line IS EMPTY OR line DOES NOT CONTAIN "," THEN:
        CONTINUE

      DECLARE parts AS STRING OF ARRAY = SPLIT line AS ","

      IF LENGTH OF parts NOT EQUAL TO 6:
        continue

      DECLARE petID AS STRING = TRIM OF parts[0]
      DECLARE petName AS STRING = TRIM OF parts[1]
      DECLARE petSpecies AS STRING = TRIM OF parts[2]
      DECLARE petBreed AS STRING = TRIM OF parts[3]
      DECLARE petAge AS INTEGER = TRIM OF parts[4]
      DECLARE petOwnerID AS STRING = TRIM OF parts[5]

      CONSTRUCT pets[petCount ++] USING petID, petName, petSpecies, petBreed, petAge, petOwnerID

    END WHILE
    CLOSE PetsFilePath    

    IF lineCount = 0 THEN
      OUTPUT "file is empty!"
      RETURN
    END IF

  PROCEDURE: ImportCustomers
  IMPORT: fileName
  EXPORT: none
  ALGORITHM:
    DECLARE CustomerFilePath AS STRING = CSVPath + CustomersFileName
    DECLARE customerCount AS INTEGER = 0

    OPEN CustomerFilePath FOR READING
    WHILE NOT EOF(CustomerFilePath)
      DECLARE line AS STRING
      READ line

      IF line IS EMPTY OR line DOES NOT CONTAIN "," THEN:
        CONTINUE

      IF line CONTAINS " ," OR ", " THEN:
        CONTINUE

      DECLARE parts AS ARRAY OF STRING = SPLIT line BY ","

      IF LENGTH OF parts NOT EQUAL TO 3:
        CONTINUE

      DECLARE petOwnerID AS STRING = TRIM(parts[0])
      DECLARE petOwnerName AS STRING = TRIM(parts[1])
      DECLARE petOwnerContact AS INTEGER

      TRY
        petOwnerContact = PARSE INT FROM TRIM(parts[2])
        CONSTRUCT customers[customerCount++] USING petOwnerID, petOwnerName, petOwnerContact
      CATCH NumberFormatException
        OUTPUT error message

    END WHILE
    CLOSE CustomerFilePath

    IF customerCount == 0 THEN
      OUTPUT "file is empty!"
      RETURN
    END IF

    PROCEDURE: getCustomers
    PURPOSE: Return the full list of PetOwner customers
    IMPORT: none
    EXPORT: List of PetOwner
    ALGORITHM:
      RETURN customers

    PROCEDURE: getCustomerSize
    PURPOSE: Return the total number of PetOwner customers
    IMPORT: none
    EXPORT: INTEGER (number of customers)
    ALGORITHM:
      RETURN SIZE OF customers

    PROCEDURE: getCustomersNameList
    PURPOSE: Return list of all customer names
    IMPORT: none
    EXPORT: ARRAY OF STRING (customer names)
    ALGORITHM:
      DECLARE customersName AS ARRAY OF STRING WITH SIZE getCustomerSize()
      FOR i FROM 0 TO getCustomerSize() - 1 DO
        customersName[i] = customers[i].petOwnerName
      END FOR
      RETURN customersName

    PROCEDURE: getCustomerID
    PURPOSE: Return customer ID at specific index (used when creating Pet)
    IMPORT: index (INTEGER)
    EXPORT: STRING (customerID)
    ALGORITHM:
      DECLARE customer AS PetOwner = customers[index]
      RETURN customer.petOwnerID

    PROCEDURE: getCustomerNameByIndex
    PURPOSE: Return customer name by finding petOwnerID from pet (used in treatment)
    IMPORT: index (INTEGER, index in pets array)
    EXPORT: STRING (customer name)
    ALGORITHM:
      DECLARE customerID AS STRING = pets[index].petOwnerID
  
      FOR EACH customer IN customers DO
        IF customer.petOwnerID == customerID THEN
          RETURN customer.petOwnerName
        END IF
      END FOR
  
      RETURN "-"

    PROCEDURE: getCustomerNameByID
    PURPOSE: Return customer name by customerID (used in PetPage)
    IMPORT: customerID (STRING)
    EXPORT: STRING (customer name)
    ALGORITHM:
      FOR EACH customer IN customers DO
        IF customer.petOwnerID == customerID THEN
          RETURN customer.petOwnerName
        END IF
      END FOR
  
      RETURN "-"

    PROCEDURE: saveCustomers
    PURPOSE: Save all customers data to CSV file
    IMPORT: none
    EXPORT: none
    ALGORITHM:
      DECLARE filePath AS STRING = CSVPath + CustomersFileName
  
      OPEN filePath FOR WRITING (overwrite mode)
      FOR EACH customer IN customers DO
        WRITE LINE: customer.petOwnerID + "," + customer.petOwnerName + "," + customer.petOwnerContact
      END FOR
      CLOSE file
      IF error occurs THEN
        OUTPUT error message

    PROCEDURE: createCustomer
    PURPOSE: Create a new PetOwner customer and add to list
    IMPORT: petOwnerID (STRING), petOwnerName (STRING), petOwnerContact (INTEGER)
    EXPORT: none
    ALGORITHM:
      CONSTRUCT newCustomer USING petOwnerID, petOwnerName, petOwnerContact
      ADD newCustomer TO customers

    PROCEDURE: removeCustomer
    PURPOSE: Remove a customer from the list and save updated data
    IMPORT: customer (PetOwner object)
    EXPORT: none
    ALGORITHM:
      REMOVE customer FROM customers
      CALL saveCustomers()

    PROCEDURE: modifyCustomerDetails (name)
    PURPOSE: Modify customer name and save updated data
    IMPORT: name (STRING), customer (PetOwner object)
    EXPORT: none
    ALGORITHM:
      SET customer.petOwnerName = name
      CALL saveCustomers()

    PROCEDURE: modifyCustomerDetails (contact)
    PURPOSE: Modify customer contact and save updated data
    IMPORT: contact (INTEGER), customer (PetOwner object)
    EXPORT: none
    ALGORITHM:
      SET customer.petOwnerContact = contact
      CALL saveCustomers()

    PROCEDURE: getPets
    PURPOSE: Return the full list of pets
    IMPORT: none
    EXPORT: List of Pet
    ALGORITHM:
      RETURN pets

    PROCEDURE: getPetSize
    PURPOSE: Return total number of pets
    IMPORT: none
    EXPORT: INTEGER
    ALGORITHM:
      RETURN SIZE OF pets

    PROCEDURE: getPetsNameList
    PURPOSE: Return list of all pet names
    IMPORT: none
    EXPORT: ARRAY OF STRING
    ALGORITHM:
      DECLARE petsName AS ARRAY OF STRING WITH SIZE getPetSize()
      FOR i FROM 0 TO getPetSize() - 1 DO
        petsName[i] = pets[i].petName
      END FOR
      RETURN petsName

    PROCEDURE: savePets
    PURPOSE: Save all pet data to CSV file
    IMPORT: none
    EXPORT: none
    ALGORITHM:
      DECLARE filePath AS STRING = CSVPath + PetsFileName
  
      OPEN filePath FOR WRITING (overwrite mode)
      FOR EACH pet IN pets DO
        WRITE LINE: petID + "," + petName + "," + petSpecies + "," + petBreed + "," + petAge + "," + petOwnerID
      END FOR
      CLOSE file
      IF error occurs THEN
        OUTPUT error message

    PROCEDURE: createPet
    PURPOSE: Create a new pet and save to CSV
    IMPORT: petID (STRING), petName (STRING), petSpecies (STRING), petBreed (STRING), petAge (INTEGER), petOwnerID (STRING)
    EXPORT: none
    ALGORITHM:
      CONSTRUCT newPet USING petID, petName, petSpecies, petBreed, petAge, petOwnerID
      ADD newPet TO pets
      CALL savePets()

    PROCEDURE: removePet
    PURPOSE: Remove a pet and save updated data
    IMPORT: pet (Pet object)
    EXPORT: none
    ALGORITHM:
      REMOVE pet FROM pets
      CALL savePets()

    PROCEDURE: modifyPet
    PURPOSE: Modify pet details and save updated data
    IMPORT: petName (STRING), petSpecies (STRING), petBreed (STRING), petAge (INTEGER), pet (Pet object)
    EXPORT: none
    ALGORITHM:
      SET pet.petName = petName
      SET pet.petSpecies = petSpecies
      SET pet.petBreed = petBreed
      SET pet.petAge = petAge
      CALL savePets()

    PROCEDURE: init
    PURPOSE: Initialize all data from CSV files
    IMPORT: none
    EXPORT: none
    ALGORITHM:
      CALL importPets()
      CALL importCustomers()

Author: Foo
Purpose: All the method for accessing/mutating pet owner info
Created: 15/05/2025
Modified: 3/06/2025
CLASS PetOwner:
    petOwnerID (String)
    petOwnerName (String)
    petOwnerContact (int)

    ACCESSOR: getPetOwnerID
    IMPORT: none
    EXPORT: petOwnerID
    ALGORITHM:
        RETURN petOwnerID
    END getPetOwnerID
    
    ACCESSOR: getPetOwnerName
    IMPORT: none
    EXPORT: petOwnerName (String)
    ALGORITHM:
        RETURN petOwnerName
    END getPetOwnerName

    ACCESSOR: getPetOwnerContact
    IMPORT: none
    EXPORT: petOwnerContact (int)
    ALGORITHM:
        RETURN petOwnerContact
    END getPetOwnerContact

    MUTATOR: setPetOwnerID
    IMPORT: pPetOwnerID
    EXPORT: none
    ALGORITHM:
        petOwnerID <- pPetOwnerID
    END setPetOwnerID

    MUTATOR: setPetOwnerName
    IMPORT: pPetOwnerName
    EXPORT: none
    ALGORITHM:
        petOwnerName <- pPetOwnerName
    END setPetOwnerName

    MUTATOR: setPetOwnerContact
    IMPORT: pPetOwnerContact
    EXPORT: none
    ALGORITHM:
        petOwnerContact <- pPetOwnerContact
    END setPetOwnerContact

    DEFAULT CONSTRUCTOR
    CONSTRUCTOR: PetOwner
    IMPORT: none
    EXPORT: none
    ASSERTION: Initialize default pet owner details
    ALGORITHM:
        SET petOwnerID <- "Customer_123456"
        SET petOwnerName <- "Foo"
        SET petOwnerContact <- 0121111111

    PARAMETER CONSTRUCTOR
    CONSTRUCTOR: PetOwner
    IMPORT: pPetOwnerID (String), pPetOwnerName (String), pPetOwnerContact (int)
    EXPORT: none
    ASSERTION: Constructor with parameter
    ALGORITHM:
        SET petOwnerID <- pPetOwnerID
        SET petOwnerName <- pPetOwnerName
        SET petOwnerContact <- pPetOwnerContact

    COPY CONSTRUCTOR
    CONSTRUCTOR: PetOwner
    IMPORT: PetOwner (COPY FROM PetOwner)
    EXPORT: none
    ASSERTION: Constructor with parameter
    ALGORITHM:
        SET petOwnerID <- PetOwner.getPetOwnerID
        SET petOwnerName <- PetOwner.getPetOwnerName
        SET petOwnerContact <- PetOwner.getPetOwnerContact

Author: Foo
Purpose: All the method for accessing/mutating pets info
Created: 15/05/2025
Modified: 25/05/2025
CLASS Pet
    petID (String)
    petName (String)
    petSpecies (String)
    petBreed (String)
    petAge (int)
    petOwnerID (String)

    ACCESSOR: getPetID
    IMPORT: none
    EXPORT: petID
    ALGORITHM:
        RETURN petID
    END getPetID

    ACCESSOR: getPetName
    IMPORT: none
    EXPORT: petName
    ALGORITHM:
        RETURN petName
    END getPetName
    
    ACCESSOR: getPetSpecies
    IMPORT: none
    EXPORT: petSpecies
    ALGORITHM:
        RETURN petSpecies
    END getPetSpecies
    
    ACCESSOR: getPetBreed
    IMPORT: none
    EXPORT: petBreed
    ALGORITHM:
        RETURN petBreed
    END getPetBreed
    
    ACCESSOR: getPetAge
    IMPORT: none
    EXPORT: petAge
    ALGORITHM:
        RETURN petAge
    END getPetAge

    ACCESSOR: getPetOwnerID
    IMPORT: none
    EXPORT: petOwnerID
    ALGORITHM:
        RETURN petOwnerID
    END getPetOwnerID

    MUTATOR: setPetID
        IMPORT: pPetID
        EXPORT: none
        ALGORITHM:
            petID <- pPetID
        END setPetID

    MUTATOR: setPetName
        IMPORT: pPetName
        EXPORT: none
        ALGORITHM:
            petName <- pPetName
        END setPetName

    MUTATOR: setPetSpecies
        IMPORT: pPetSpecies
        EXPORT: none
        ALGORITHM:
            petSpecies <- pPetSpecies
        END setPetSpecies

    MUTATOR: setPetBreed
        IMPORT: pPetBreed
        EXPORT: none
        ALGORITHM:
            petBreed <- pPetBreed
        END setPetBreed

    MUTATOR: setPetAge
        IMPORT: pPetAge
        EXPORT: none
        ALGORITHM:
            petAge <- pPetAge
        END setPetAge

    MUTATOR: setPetOwnerID
        IMPORT: pPetOwnerID
        EXPORT: none
        ALGORITHM:
            petOwnerID <- pPetOwnerID
        END setPetOwnerID

    DEFAULT CONSTRUCTOR
    CONSTRUCTOR: Pet
    IMPORT: none
    EXPORT: none
    ASSERTION: Initialize default pet details
    ALGORITHM:
        SET petID <- "pet_123456"
        SET petName <- "Kitty"
        SET petSpecies <- "cat"
        SET petBreed <- "Siamese cat"
        SET petAge <- 40
        SER petOwnerID <- "Customer_123456"

    PARAMETER CONSTRUCTOR
    CONSTRUCTOR: Pet
    IMPORT: pPetID (String), pPetName (String), pPetSpecies (String), pPetBreed (String), pPetAge (int), pPetOwnerID (String)
    EXPORT: none
    ASSERTION: Constructor with parameter
    ALGORITHM:
        SET petID <- pPetID
        SET petName <- pPetName
        SET petSpecies <- pPetSpecies
        SET petBreed <- pPetBreed
        SET petAge <- pPetAge
        SER petOwnerID <- pPetOwnerID

    COPY CONSTRUCTOR
    CONSTRUCTOR: Pet
    IMPORT: Pet (COPY FROM Pet)
    EXPORT: none
    ASSERTION: Constructor with parameter
    ALGORITHM:
        SET petID <- Pet.getPetID
        SET petName <- Pet.getPetName
        SET petSpecies <- Pet.getPetSpecies
        SET petBreed <- Pet.getPetBreed
        SET petAge <- Pet.getPetAge
        SER petOwnerID <- Pet.getPetOwnerID

Author: Jun Xiang
Purpose: All the method for accessing treatment info
Created: 15/05/2025
Modified: 23/05/2025
CLASS Treatment

  CLASS FIELDS:
    treatmentID (String)
    treatmentName (String)
    treatmentFee (Double)

  METHODS:

    Treatment()
      IMPORT: none
      EXPORT: none
      ALGORITHM:
        treatmentID ← ""
        treatmentName ← ""
        treatmentFee ← 0.0
    END Treatment

    Treatment(id: String, name: String, fee: Double)
      IMPORT: id, name, fee
      EXPORT: none
      ALGORITHM:
        setTreatmentID(id)
        setTreatmentName(name)
        setTreatmentFee(fee)
    END Treatment

    Treatment(copy: Treatment)
      IMPORT: copy
      EXPORT: none
      ALGORITHM:
        treatmentID ← copy.getTreatmentID()
        treatmentName ← copy.getTreatmentName()
        treatmentFee ← copy.getTreatmentFee()
    END Treatment

    getTreatmentID()
      IMPORT: none
      EXPORT: String
      ALGORITHM:
        RETURN treatmentID
    END getTreatmentID

    setTreatmentID(id: String)
      IMPORT: id
      EXPORT: none
      ALGORITHM:
        IF id IS NOT EMPTY THEN
          treatmentID ← id
    END setTreatmentID

    getTreatmentName()
      IMPORT: none
      EXPORT: String
      ALGORITHM:
        RETURN treatmentName
    END getTreatmentName

    setTreatmentName(name: String)
      IMPORT: name
      EXPORT: none
      ALGORITHM:
        IF name IS NOT EMPTY THEN
          treatmentName ← name
    END setTreatmentName

    getTreatmentFee()
      IMPORT: none
      EXPORT: Double
      ALGORITHM:
        RETURN treatmentFee
    END getTreatmentFee

    setTreatmentFee(fee: Double)
      IMPORT: fee
      EXPORT: none
      ALGORITHM:
        IF fee >= 0.0 THEN
          treatmentFee ← fee
    END setTreatmentFee

END CLASS


Author: Jun Xiang
Purpose: All the method for accessing/mutating transaction info
Created: 15/05/2025
Modified: 12/06/2025
CLASS Transaction

  CLASS FIELDS:
    transactionID (String)
    treatmentList (Array of Treatment)
    totalAmount (Double)
    taxAmount (Double)
    consultationFee (Double)
    finalAmount (Double)

  CONSTRUCTOR Transaction(id: String, list: Array of Treatment, fee: Double)
    transactionID ← id
    treatmentList ← list
    consultationFee ← fee
  END CONSTRUCTOR

  METHOD calculateTotalAmount(): Double
    total ← 0.0
    FOR EACH treatment IN treatmentList DO
      total ← total + treatment.getTreatmentFee()
    END FOR
    totalAmount ← total
    RETURN totalAmount
  END METHOD

  METHOD calculateFinalAmount(): Double
    taxAmount ← totalAmount * 0.10
    finalAmount ← totalAmount + taxAmount + consultationFee
    RETURN finalAmount
  END METHOD

  METHOD setConsultationFee(fee: Double)
    IF fee >= 1 AND fee <= 1000 THEN
      consultationFee ← fee
    END IF
  END METHOD

  METHOD getConsultationFee(): Double
    RETURN consultationFee
  END METHOD

  METHOD getTotalAmount(): Double
    RETURN totalAmount
  END METHOD

  METHOD getTaxAmount(): Double
    RETURN taxAmount
  END METHOD

  METHOD getFinalAmount(): Double
    RETURN finalAmount
  END METHOD

  METHOD getTransactionID(): String
    RETURN transactionID
  END METHOD

  METHOD getTreatmentList(): Array of Treatment
    RETURN treatmentList
  END METHOD

END CLASS


Author: Angel  
Purpose: All the methods for accessing/mutating receipt info  
Created: 15/05/2025  
Modified: 12/06/2025  

CLASS Receipt

    ATTRIBUTES:
        Transaction transaction     // Holds transaction details
        Payment payment             // Holds payment details

    // Default constructor initializes empty receipt
    CONSTRUCTOR()
        SET transaction = null
        SET payment = null
    END CONSTRUCTOR

    // Constructor with parameters
    CONSTRUCTOR(transaction, payment)
        SET this.transaction = transaction
        SET this.payment = payment
    END CONSTRUCTOR

    // Copy constructor
    CONSTRUCTOR(otherReceipt)
        SET this.transaction = otherReceipt.transaction
        SET this.payment = otherReceipt.payment
    END CONSTRUCTOR

    /*
     * Generates a formatted string containing receipt details
     * Includes treatment info, costs, and payment summary
     */
    METHOD generateReceiptText()
        CREATE sb AS STRINGBUILDER
        CREATE df AS DECIMALFORMAT WITH PATTERN "0.00"

        APPEND "=== Animal Clinic Receipt ===\n" TO sb
        APPEND "Date of Visit: " + transaction.getTransactionID() + "\n" TO sb

        APPEND "--- Treatments ---\n" TO sb
        SORT transaction.treatmentList BY treatmentName ASCENDING

        FOR EACH treatment IN transaction.treatmentList DO
            APPEND treatment.treatmentName + " - RM " + df.format(treatment.treatmentFee) + "\n" TO sb
        END FOR

        // Add breakdown of costs
        APPEND "Consultation Fee: RM " + df.format(transaction.consultationFee) + "\n" TO sb
        APPEND "Subtotal (Before Tax): RM " + df.format(transaction.totalAmount) + "\n" TO sb
        APPEND "Tax (6%): RM " + df.format(transaction.taxAmount) + "\n" TO sb
        APPEND "Total: RM " + df.format(transaction.finalAmount) + "\n\n" TO sb

        // Add payment summary
        APPEND "--- Payment Details ---\n" TO sb
        APPEND payment.getPaymentSummary() TO sb

        RETURN sb.toString()
    END METHOD

    // Getter for transaction
    METHOD getTransaction()
        RETURN transaction
    END METHOD

    // Getter for payment
    METHOD getPayment()
        RETURN payment
    END METHOD

    // Setter for transaction
    METHOD setTransaction(value)
        SET transaction = value
    END METHOD

    // Setter for payment
    METHOD setPayment(value)
        SET payment = value
    END METHOD

END CLASS


Author: Angel  
Purpose: All the methods for accessing/mutating payment info  
Created: 15/05/2025  
Modified: 12/06/2025  

CLASS Payment

    ATTRIBUTES:
        String paymentMethod         // e.g. "Cash" or "Card"
        Double amountPaid            // Amount paid by client
        Double balanceReturned       // Change given back (for cash)
        String paymentDate           // Date of payment
        String status                // Status: "Paid", "Pending", or "Failed"

    // Default constructor
    CONSTRUCTOR()
        SET paymentMethod = ""
        SET amountPaid = 0.0
        SET paymentDate = ""
        SET status = "Pending"
        SET balanceReturned = 0.0
    END CONSTRUCTOR

    // Constructor with parameters
    CONSTRUCTOR(paymentMethod, amountPaid, paymentDate)
        SET this.paymentMethod = paymentMethod
        SET this.amountPaid = amountPaid
        SET this.paymentDate = paymentDate
        SET this.status = "Pending"
        SET this.balanceReturned = 0.0
    END CONSTRUCTOR

    // Copy constructor
    CONSTRUCTOR(otherPayment)
        SET this.paymentMethod = otherPayment.paymentMethod
        SET this.amountPaid = otherPayment.amountPaid
        SET this.paymentDate = otherPayment.paymentDate
        SET this.status = otherPayment.status
        SET this.balanceReturned = otherPayment.balanceReturned
    END CONSTRUCTOR

    /*
     * Processes the payment based on method and amount
     * Updates status and calculates change (if needed)
     */
    METHOD processPayment(totalCost)
        CREATE df AS DECIMALFORMAT WITH PATTERN "0.00"

        IF paymentMethod EQUALS "Cash" (case-insensitive) THEN
            IF amountPaid >= totalCost THEN
                SET balanceReturned = amountPaid - totalCost
                FORMAT balanceReturned TO 2 DECIMAL PLACES
                SET status = "Paid"
            ELSE
                PRINT "Error: Insufficient cash payment."
                SET status = "Failed"
            END IF
        ELSE IF paymentMethod EQUALS "Card" (case-insensitive) THEN
            SET balanceReturned = 0.0
            SET status = "Paid"
        ELSE
            PRINT "Error: Unknown payment method."
            SET status = "Failed"
        END IF
    END METHOD

    /*
     * Returns formatted payment summary as string
     */
    METHOD getPaymentSummary()
        CREATE df AS DECIMALFORMAT WITH PATTERN "0.00"

        RETURN "Payment Method: " + paymentMethod +
               "\nAmount Paid: RM " + df.format(amountPaid) +
               "\nBalance Returned: RM " + df.format(balanceReturned) +
               "\nPayment Date: " + paymentDate +
               "\nStatus: " + status
    END METHOD

    // Getters
    METHOD getPaymentMethod()
        RETURN paymentMethod
    END METHOD

    METHOD getAmountPaid()
        RETURN amountPaid
    END METHOD

    METHOD getBalanceReturned()
        RETURN balanceReturned
    END METHOD

    METHOD getPaymentDate()
        RETURN paymentDate
    END METHOD

    METHOD getStatus()
        RETURN status
    END METHOD

    // Setters
    METHOD setPaymentMethod(value)
        SET paymentMethod = value
    END METHOD

    METHOD setAmountPaid(value)
        SET amountPaid = value
    END METHOD

    METHOD setBalanceReturned(value)
        SET balanceReturned = value
    END METHOD

    METHOD setPaymentDate(value)
        SET paymentDate = value
    END METHOD

    METHOD setStatus(value)
        SET status = value
    END METHOD

END CLASS

